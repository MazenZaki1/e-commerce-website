generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// This is the Prisma schema for an e-commerce website.  
enum Role {
    USER
    ADMIN
}

enum orderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

// Necessary for Next auth
model Account {
    account_id                       String  @id @default(cuid())
    user_id                  String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    user_id            String    @id @default(cuid())
    first_name          String?
    last_name           String?
    email         String   @unique
    emailVerified DateTime?
    password String
    image         String?
    role          Role      @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts      Account[]
    orders        Order[]
    cart          Cart[]
}

model Product {
    product_id   String   @id @default(cuid())
    name         String
    description  String?
    price        Float
    image_url    String?
    category     String?
    stock        Int      @default(0)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    orderItems   OrderItem[]
    cartItems    CartItem[]
}
model Order {
    order_id     String   @id @default(cuid())
    user_id      String
    total_amount Float
    status       String   @default("pending")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    orderItems   OrderItem[]
}

model OrderItem {
    order_item_id String   @id @default(cuid())
    order_id      String
    product_id    String
    quantity      Int
    price         Float

    order         Order    @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
    product       Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Cart {
    cart_id      String   @id @default(cuid())
    user_id      String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    cartItems    CartItem[]
    @@unique([user_id]) // Ensures one cart per user
}
model CartItem {
    cart_item_id String   @id @default(cuid())
    cart_id      String
    product_id   String
    quantity     Int

    cart         Cart     @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
    product      Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}