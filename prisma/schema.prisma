generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// This is the Prisma schema for an e-commerce website.  
enum Role {
    USER
    ADMIN
}

enum orderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

// Necessary for Next auth
model Account {
    account_id                       Int  @id @default(autoincrement())
    user_id                  Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    user_id            Int    @id @default(autoincrement())
    first_name          String?
    last_name           String?
    email         String   @unique
    emailVerified DateTime?
    password String
    role          Role      @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    accounts      Account[]
    orders        Order[]
    cart          Cart[]
    addresses     Address[]
    reviews       Review[]
}

model Product {
    product_id   Int   @id @default(autoincrement())
    category_id  Int
    name         String
    description  String?
    price        Float
    image_url    String?
    stock        Int      @default(0)
    sold_count   Int      @default(0)
    is_deleted   Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    orderItems   OrderItem[]
    cartItems    CartItem[]
    reviews      Review[]
    category     Category @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
}

model Order {
    order_id     Int   @id @default(autoincrement())
    user_id      Int
    total_amount Float
    status       String   @default("pending")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    orderItems   OrderItem[]
}

model OrderItem {
    order_item_id Int   @id @default(autoincrement())
    order_id      Int
    product_id    Int
    quantity      Int
    price         Float

    order         Order    @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
    product       Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Cart {
    cart_id      Int   @id @default(autoincrement())
    user_id      Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    cartItems    CartItem[]
    @@unique([user_id]) // Ensures one cart per user
}
model CartItem {
    cart_item_id Int   @id @default(autoincrement())
    cart_id      Int
    product_id   Int
    quantity     Int

    cart         Cart     @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
    product      Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Address {
    address_id Int   @id @default(autoincrement())
    user_id    Int
    address    String
    city       String
    state      String
    zip        String
    country    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Category {
    category_id Int   @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    products    Product[]
}

model Review {
    review_id Int   @id @default(autoincrement())
    user_id   Int
    product_id Int
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
    product   Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}